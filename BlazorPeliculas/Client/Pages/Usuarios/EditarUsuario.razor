@page "/usuarios/editar/{UserId}"
@inject IRepositorioPelicula _repositorio
@inject IMostrarMensajes _mostrarMensaje

<h3>Editar Usuario</h3>

<div class="form-inline">
    <select class="form-control mb-2 mr-sm-2" @bind="rolSeleccionado">
        <option value="0">-- Selecciones un Rol --</option>
        @foreach (var roles in roles)
        {
            <option value="@roles.RolName">@roles.RolName</option>
        }
    </select>

    <button class="btn btn-info mb-2 mr-sm-2" @onclick="AsignarRol">Asignar Rol</button>
    <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoverRol">Remover Rol</button>
</div>
    



@code {

    [Parameter] public string UserId { get; set; }

    private List<RolDTO> roles = new List<RolDTO>();

    private string rolSeleccionado = "0";

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await _repositorio.Get<List<RolDTO>>("api/usuarios/roles");

        if (httpResponse.Error)
        {
            await _mostrarMensaje.MostrarMensajesError(await httpResponse.GetBody());
        }
        else
        {
            roles = httpResponse.Response;
        }
    }

    private async Task AsignarRol()
    {
        await EditarRol("api/usuarios/asignarRol");
    }

    private async Task RemoverRol()
    {
        await EditarRol("api/usuarios/removerRol");
    }

    private async Task EditarRol(string url)
    {
        if (rolSeleccionado == "0")
        {
            await _mostrarMensaje.MostrarMensajesError("Debe Seleccionar un Rol.");
            return;
        }

        var rolDTO = new EditarRolDTO
        {
             RoleId = rolSeleccionado,
             UserId = UserId
        };

        var httpResponse = await _repositorio.Post<EditarRolDTO>(url, rolDTO);
        if (httpResponse.Error)
        {
            await _mostrarMensaje.MostrarMensajesError(await httpResponse.GetBody());
        }
        else
        {
            await _mostrarMensaje.MostrarMensajeExitoso("Operaión Realizada!");
        }
    }

}
