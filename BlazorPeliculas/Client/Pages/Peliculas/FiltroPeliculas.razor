@page "/peliculas/buscar"
@inject IRepositorioPelicula RepositorioPelicula
@inject NavigationManager _navigationManager


<h3>Filtro Péliculas</h3>
<hr />
<div class="form-inline">
    <div class="form-group mb-2">
        <label for="titulo" class="sr-only">Título</label>
        <input @bind-value="Titulo" @bind-value:event="oninput" @onkeypress="@((KeyboardEventArgs e) => TituloKeyPress(e))"
               type="text" class="form-control" id="titulo" placeholder="Título Película." />
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <select class="form-control" @bind="GenerosSeleccionados">
            <option value="0">-- Seleccione Género --</option>
            @foreach (var genero in Generos)
            {
                <option value="@genero.Id">@genero.Nombre</option>
            }
        </select>
    </div>
    <div class="form-inline">
        <div class="form-group mx-sm-3 mb-2">
            <input type="checkbox" class="form-check-input" id="estreno" @bind="FuturosEstrenos" />
            <label class="form-check-label" for="estrenos">Futuros Estrenos</label>
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <input type="checkbox" class="form-check-input" id="cartelera" @bind="EnCartelera" />
            <label class="form-check-label" for="cartelera">En Cartelera</label>
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <input type="checkbox" class="form-check-input" id="masVotadas" @bind="MasVotadas" />
            <label class="form-check-label" for="masVotadas">Mas Votadas</label>
        </div>
    </div>

    <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="CargarNuevaPelicula">Filtrar</button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimpiarOnClick">Limpiar</button>
</div>

<ListadoPeliculas Peliculas="Peliculas"></ListadoPeliculas>
<Paginacion PaginaActual="paginaActual" PaginasTotales="paginasTotales" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>

@code {

    private string Titulo { get; set; } = string.Empty;
    private string GenerosSeleccionados { get; set; } = "0";
    private bool FuturosEstrenos = false;
    private bool EnCartelera = false;
    private bool MasVotadas = false;
    private List<Pelicula> Peliculas;
    public List<Genero> Generos { get; set; } = new List<Genero>();
    Dictionary<string,string> queryStringDict = new Dictionary<string,string>();
    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {

        await ObtenerGeneros();

        var url = _navigationManager.Uri;

        var queries = _navigationManager.ObtenerQueryString(url);

        if (queries == null)
        {
            await RealizarBusqueda(string.Empty);
        }
        else
        {
            queryStringDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];
            await RealizarBusqueda(queryStrings);
        }


    }

    private void LlenarCampos()
    {
        if (queryStringDict.ContainsKey("generoid"))
        {
            GenerosSeleccionados = queryStringDict["generoid"];
        }

        if (queryStringDict.ContainsKey("titulo"))
        {
            Titulo= queryStringDict["titulo"];
        }

        if (queryStringDict.ContainsKey("encartelera"))
        {
            bool.TryParse(queryStringDict["encartelera"], out EnCartelera);
        }

        if (queryStringDict.ContainsKey("estrenos"))
        {
            bool.TryParse(queryStringDict["estrenos"], out FuturosEstrenos);
        }

        if (queryStringDict.ContainsKey("masvotadas"))
        {
            bool.TryParse(queryStringDict["masvotadas"], out MasVotadas);
        }

        if (queryStringDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringDict["pagina"], out paginaActual);
        }

    }

    private async Task ObtenerGeneros()
    {
        var httpResponse = await RepositorioPelicula.Get<List<Genero>>("api/Generos", incluirToken: false);
        Generos = httpResponse.Response;
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarNuevaPelicula();
    }

    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CargarNuevaPelicula();
        }
    }

    private async Task CargarNuevaPelicula()
    {
        var queryString = GenerarQueryString();
        _navigationManager.NavigateTo("/peliculas/buscar?"+queryString);
        await RealizarBusqueda(queryString);
    }

    private async Task RealizarBusqueda(string queryString)
    {
        var httpResponse = await RepositorioPelicula.Get<List<Pelicula>>("api/peliculas/filtrar?"+queryString, incluirToken: false);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        Peliculas = httpResponse.Response;
    }

    private string GenerarQueryString()
    {
        if (queryStringDict == null)
        {
            queryStringDict = new Dictionary<string,string>();
        }

        queryStringDict["generoid"]=GenerosSeleccionados;
        queryStringDict["titulo"]=Titulo;
        queryStringDict["encartelera"]=EnCartelera.ToString();
        queryStringDict["estrenos"]=FuturosEstrenos.ToString();
        queryStringDict["masvotadas"]=MasVotadas.ToString();
        queryStringDict["pagina"]=paginaActual.ToString();

        var valoresPorDefecto = new List<string>{"false","","0"};

        //genroID=&titulo=spider:
        return string.Join("&",queryStringDict.Where(x =>!valoresPorDefecto.Contains(x.Value.ToLower()))
                     .Select(x =>$"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());



    }

    private async Task LimpiarOnClick()
    {

        Titulo = string.Empty;
        GenerosSeleccionados = "0";
        FuturosEstrenos = false;
        EnCartelera = false;
        MasVotadas = false;
        paginaActual = 1;
        await CargarNuevaPelicula();
    }

}
