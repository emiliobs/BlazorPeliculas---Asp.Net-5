@page "/peliculas/editar/{PeliculaId:int}"
@inject IRepositorioPelicula _repositorio
@inject NavigationManager _navigationManager
@inject IMostrarMensajes _mostrarMensaje

<h3>Editar Película</h3>
<hr />

@if (Pelicula == null)
{
    <text>Cargando.....</text>
}
else
{
    <FormularioPeliculas
                  Pelicula="Pelicula" 
                  OnValidSubmit="Editar" 
                 GenerosNoSeleccionados="GenerosNoSeleccionados"
                  ActoresSeleccionados="ActotesSeleccionados" 
                 GenerosSeleccionados="GenerosSeleccionados">

    </FormularioPeliculas>
}


@code {

    [Parameter] public int PeliculaId { get; set; }
    Pelicula Pelicula;
    private List<Genero> GenerosNoSeleccionados = new List<Genero>();
    private List<Genero> GenerosSeleccionados = new List<Genero>();
    private List<Persona> ActotesSeleccionados { get; set; }


    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await _repositorio.Get<PeliculaActualizacionDTO>($"api/peliculas/actualizar/{PeliculaId}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _navigationManager.NavigateTo("peliculas");
            }
            else
            {
                await _mostrarMensaje.MostrarMensajesError(await httpResponse.GetBody());
            }
        }
        else
        {
            var model = httpResponse.Response;
            ActotesSeleccionados = model.Actores;
            GenerosNoSeleccionados = model.GenerosNoSeleccionados;
            GenerosSeleccionados = model.GenerosSeleccionados;
            Pelicula = model.Pelicula;

        }
    }


    private void Editar()
    {
        Console.WriteLine("Editando Películas......");
    }

}
