@inject IRepositorioPelicula _repositorio

<EditForm Model="Pelicula" OnValidSubmit="OnDataAnnonationsValidated">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label>Título:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Titulo"></InputText>
            <ValidationMessage For="@(() => Pelicula.Titulo)"></ValidationMessage>
        </div>
    </div>
    <div class="form-inline">
        <label>En Cartelera: </label>
        <div>
            <InputCheckbox @bind-Value="@Pelicula.EnCartelera"></InputCheckbox>
            <ValidationMessage For="@(() => Pelicula.EnCartelera)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Pelicula.Trailer"></InputText>
            <ValidationMessage For="@(() => Pelicula.Trailer)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Fecha de Lanzamiento:</label>
        <div>
            <InputDate class="form-control" @bind-Value="@Pelicula.Lanzamiento"></InputDate>
            <ValidationMessage For="@(() => Pelicula.Lanzamiento)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="@Pelicula.Resumen"
                       For="@(() => Pelicula.Resumen)"
                       Label="Resumen"></InputMarkdown>

    </div>

    <div class="form-group">
        <InputImg Label="Foto" ImagenSeleccionada="ImagenSeleccinada" ImagenURL="@imagenURL"></InputImg>
    </div>

    <div class="form-group">
        <label>Género:</label>
        <div>
            <SelectorMultiple Seleccionados="Seleccionados" NoSeleccionados="NoSeleccionados"></SelectorMultiple>
        </div>
    </div>

    <div class="form-group">
        <label>Actores:</label>
        <div>
            <SelectorMultipleTypeahead Context="persona" SearchMethod="BuscarActores" ElementosSeleccionados="ActoresSeleccionados">
                <MyListTemplate>
                    @persona.Nombre / <input type="text" placeholder="Personaje" @bind="persona.Personaje" />
                </MyListTemplate>
                <MyResultTemplate>
                    <img style="width:50px;" src="@persona.Foto" />
                    @persona.Nombre
                </MyResultTemplate>
            </SelectorMultipleTypeahead>
        </div>
    </div>

    <button class="btn btn-success mb-2" type="submit">Guardar Cambios</button>

</EditForm>

@code {

    [Parameter] public Pelicula Pelicula { get; set; }

    [Parameter] public EventCallback OnValidSubmit { get; set; }

    [Parameter] public List<Genero> GenerosSeleccionados { get; set; }

    [Parameter] public List<Genero> GenerosNoSeleccionados { get; set; }

    [Parameter] public List<Persona> ActoresSeleccionados { get; set; } = new List<Persona>();


    public List<SelectorMultipleModel> Seleccionados { get; set; } = new List<SelectorMultipleModel>();
    public List<SelectorMultipleModel> NoSeleccionados { get; set; } = new List<SelectorMultipleModel>();

    string imagenURL;

    protected override void OnInitialized()
    {
        Seleccionados = GenerosSeleccionados.Select(g => new SelectorMultipleModel(g.Id.ToString(), g.Nombre)).ToList();
        NoSeleccionados = GenerosNoSeleccionados.Select(g => new SelectorMultipleModel(g.Id.ToString(), g.Nombre)).ToList();

        if (!string.IsNullOrWhiteSpace(Pelicula.Poster))
        {
            imagenURL = Pelicula.Poster;
            Pelicula.Poster = null;
        }

        base.OnInitialized();
    }

    private void ImagenSeleccinada(string imagenBAse4)
    {
        Pelicula.Poster = imagenBAse4;
        imagenURL = null;
    }

    private async Task<IEnumerable<Persona>> BuscarActores(string searchText)
    {
        var responseHTTP = await _repositorio.Get<List<Persona>>($"api/personas/buscar/{searchText}");
        return responseHTTP.Response;
    }


    private async Task OnDataAnnonationsValidated()
    {
        Pelicula.GeneroPeliculas = Seleccionados
            .Select(x => new GeneroPelicula { GeneroId = int.Parse(x.Llave) }).ToList();

        Pelicula.PeliculaActors = ActoresSeleccionados
            .Select(x => new PeliculaActor { PersonaId = x.Id, Personaje = x.Personaje }).ToList();

        if (!string.IsNullOrWhiteSpace(Pelicula.Poster)) { imagenURL = null; }

        await OnValidSubmit.InvokeAsync(null);
    }
}
