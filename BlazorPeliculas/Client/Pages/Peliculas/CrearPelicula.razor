@page "/peliculas/crear"
@inject NavigationManager navigationManager
@inject IRepositorioPelicula IRepositorioPelicula
@inject IMostrarMensajes IMostrarMensajes
@attribute [Authorize(Roles = "Admoin")]

<h3>Crear Película</h3>
<hr />
@if (MostrarFormulario)
{
    <FormularioPeliculas Pelicula="Pelicula" OnValidSubmit="Crear" GenerosNoSeleccionados="GenerosNoSeleccionados"
                         GenerosSeleccionados="GenerosSeleccionados"></FormularioPeliculas>
}
else
{
    <text>Cargando.....</text>
}


@code {

    private bool MostrarFormulario { get; set; } = false;
    private Pelicula Pelicula = new Pelicula();
    private List<Genero> GenerosNoSeleccionados = new List<Genero>();
    private List<Genero> GenerosSeleccionados = new List<Genero>();

    protected async override Task OnInitializedAsync()
    {
        var responseHTTP = await IRepositorioPelicula.Get<List<Genero>>("api/Generos");
        GenerosNoSeleccionados = responseHTTP.Response;
        MostrarFormulario = true;
    }

    async Task Crear()
    {
        var httpResponse = await IRepositorioPelicula.Post<Pelicula, int>("api/Peliculas", Pelicula);
        if (httpResponse.Error)
        {
            await IMostrarMensajes.MostrarMensajesError(await httpResponse.GetBody());
        }
        else
        {
            var peliculaId = httpResponse.Response;
            navigationManager.NavigateTo($"/pelicula/{peliculaId}/{Pelicula.Titulo.Replace(" ", "-")}");
        }
    }

}
